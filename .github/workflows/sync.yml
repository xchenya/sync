name: Sync Upstream Releases

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      repositories:
        description: '要同步的仓库列表 (格式: owner/repo, 多个用逗号分隔)'
        required: true
        default: 'AlistGo/alist,Xmarmalade/alisthelper,ikunshare/Onekey,SteamRE/DepotDownloader'

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TARGET_REPO: "${{ github.repository }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq git

          if ! command -v gh &>/dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
          fi

      - name: Determine repositories
        id: set-repos
        run: |
          if [ -n "${{ github.event.inputs.repositories }}" ]; then
            REPOSITORIES="${{ github.event.inputs.repositories }}"
          elif [ -n "${{ vars.UPSTREAM_REPOSITORIES }}" ]; then
            REPOSITORIES="${{ vars.UPSTREAM_REPOSITORIES }}"
          else
            REPOSITORIES="AlistGo/alist"
          fi
          echo "REPOSITORIES=${REPOSITORIES}" >> $GITHUB_OUTPUT

      - name: Sync releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p sync-history

          get_tag() {
            local upstream="$1"
            local tag=""
            tag=$(gh api repos/$upstream/releases 2>/dev/null | jq -r '[.[] | select(.prerelease == false)][0].tag_name' 2>/dev/null)
            if [[ -z "$tag" || "$tag" == "null" ]]; then
              tag=$(gh api repos/$upstream/tags 2>/dev/null | jq -r '.[0].name' 2>/dev/null)
            fi
            if [[ -z "$tag" || "$tag" == "null" ]]; then
              return 1
            fi
            echo "$tag"
          }

          echo "${{ steps.set-repos.outputs.REPOSITORIES }}" | tr ',' '\n' | while read -r upstream; do
            echo "🚀 处理仓库: $upstream"
            owner=$(cut -d/ -f1 <<< "$upstream")
            repo=$(cut -d/ -f2 <<< "$upstream")
            history_file="sync-history/${owner}_${repo}.txt"

            tag=$(get_tag "$upstream") || { echo "❌ 获取 tag 失败，跳过 $upstream"; continue; }
            echo "✅ 获取到 tag: $tag"

            last_synced=$(cat "$history_file" 2>/dev/null || echo "init")
            if [[ "$tag" == "$last_synced" ]]; then
              echo "🔄 已同步: $tag，跳过"
              continue
            fi

            zip_file="${repo}-${tag}.zip"
            zip_url="https://github.com/$upstream/archive/refs/tags/$tag.zip"

            echo "⬇️ 下载源码: $zip_url"
            if ! wget -q -O "$zip_file" "$zip_url"; then
              echo "⚠️ 下载失败，使用 git 克隆生成 zip"
              git clone --depth 1 --branch "$tag" "https://github.com/$upstream.git" "${repo}-${tag}-src"
              pushd "${repo}-${tag}-src" >/dev/null
              zip -qr "../$zip_file" .
              popd >/dev/null
              rm -rf "${repo}-${tag}-src"
            fi

            sync_tag="release-$(date -u +'%Y-%m-%d-%s')"
            md5_sum=$(md5sum "$zip_file" | awk '{ print $1 }')

            echo "📦 发布 release: $sync_tag"
            gh release create "$sync_tag" "$zip_file" \
              --title "$sync_tag: ${repo} (${tag})" \
              --notes "MD5: ${md5_sum}\nRepo: ${upstream}\nSource Tag: ${tag}"

            echo "$tag" > "$history_file"
            rm -f "$zip_file"
          done

      - name: Commit sync history
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add sync-history
          git commit -m "Update sync records" || echo "✅ 没有变更"
          git push
